// This file is autogenerated by the hrpc compiler
/* eslint-disable camelcase */

import { c, RPC, RPCStream, RPCRequestStream } from 'hrpc/runtime'
import { getEncoding } from './messages.js'

const methods = new Map([
  ['@wdk-core/log', 0],
  [0, '@wdk-core/log'],
  ['@wdk-core/workletStart', 1],
  [1, '@wdk-core/workletStart'],
  ['@wdk-core/getAddress', 2],
  [2, '@wdk-core/getAddress'],
  ['@wdk-core/getAddressBalance', 3],
  [3, '@wdk-core/getAddressBalance'],
  ['@wdk-core/quoteSendTransaction', 4],
  [4, '@wdk-core/quoteSendTransaction'],
  ['@wdk-core/sendTransaction', 5],
  [5, '@wdk-core/sendTransaction'],
  ['@wdk-core/getAbstractedAddress', 6],
  [6, '@wdk-core/getAbstractedAddress'],
  ['@wdk-core/getAbstractedAddressBalance', 7],
  [7, '@wdk-core/getAbstractedAddressBalance'],
  ['@wdk-core/getAbstractedAddressTokenBalance', 8],
  [8, '@wdk-core/getAbstractedAddressTokenBalance'],
  ['@wdk-core/abstractedAccountTransfer', 9],
  [9, '@wdk-core/abstractedAccountTransfer'],
  ['@wdk-core/getApproveTransaction', 10],
  [10, '@wdk-core/getApproveTransaction'],
  ['@wdk-core/abstractedSendTransaction', 11],
  [11, '@wdk-core/abstractedSendTransaction'],
  ['@wdk-core/abstractedAccountQuoteTransfer', 12],
  [12, '@wdk-core/abstractedAccountQuoteTransfer'],
  ['@wdk-core/getTransactionReceipt', 13],
  [13, '@wdk-core/getTransactionReceipt'],
  ['@wdk-core/dispose', 14],
  [14, '@wdk-core/dispose'],
  ['@wdk-core/generateAndEncrypt', 15],
  [15, '@wdk-core/generateAndEncrypt'],
  ['@wdk-core/decrypt', 16],
  [16, '@wdk-core/decrypt'],
  ['@wdk-core/generateSeed', 17],
  [17, '@wdk-core/generateSeed']
])

class HRPC {
  constructor (stream) {
    this._stream = stream
    this._handlers = []
    this._requestEncodings = new Map([
      ['@wdk-core/log', getEncoding('@wdk-core/log-request')],
      ['@wdk-core/workletStart', getEncoding('@wdk-core/workletStart-request')],
      ['@wdk-core/getAddress', getEncoding('@wdk-core/getAddress-request')],
      ['@wdk-core/getAddressBalance', getEncoding('@wdk-core/getAddressBalance-request')],
      ['@wdk-core/quoteSendTransaction', getEncoding('@wdk-core/quoteSendTransaction-request')],
      ['@wdk-core/sendTransaction', getEncoding('@wdk-core/sendTransaction-request')],
      ['@wdk-core/getAbstractedAddress', getEncoding('@wdk-core/getAbstractedAddress-request')],
      ['@wdk-core/getAbstractedAddressBalance', getEncoding('@wdk-core/getAbstractedAddressBalance-request')],
      ['@wdk-core/getAbstractedAddressTokenBalance', getEncoding('@wdk-core/getAbstractedAddressTokenBalance-request')],
      ['@wdk-core/abstractedAccountTransfer', getEncoding('@wdk-core/abstractedAccountTransfer-request')],
      ['@wdk-core/getApproveTransaction', getEncoding('@wdk-core/getApproveTransaction-request')],
      ['@wdk-core/abstractedSendTransaction', getEncoding('@wdk-core/abstractedSendTransaction-request')],
      ['@wdk-core/abstractedAccountQuoteTransfer', getEncoding('@wdk-core/abstractedAccountQuoteTransfer-request')],
      ['@wdk-core/getTransactionReceipt', getEncoding('@wdk-core/getTransactionReceipt-request')],
      ['@wdk-core/dispose', getEncoding('@wdk-core/dispose-request')],
      ['@wdk-core/generateAndEncrypt', getEncoding('@wdk-core/generateAndEncrypt-request')],
      ['@wdk-core/decrypt', getEncoding('@wdk-core/decrypt-request')],
      ['@wdk-core/generateSeed', getEncoding('@wdk-core/generateSeed-request')]
    ])
    this._responseEncodings = new Map([
      ['@wdk-core/workletStart', getEncoding('@wdk-core/workletStart-response')],
      ['@wdk-core/getAddress', getEncoding('@wdk-core/getAddress-response')],
      ['@wdk-core/getAddressBalance', getEncoding('@wdk-core/getAddressBalance-response')],
      ['@wdk-core/quoteSendTransaction', getEncoding('@wdk-core/quoteSendTransaction-response')],
      ['@wdk-core/sendTransaction', getEncoding('@wdk-core/sendTransaction-response')],
      ['@wdk-core/getAbstractedAddress', getEncoding('@wdk-core/getAbstractedAddress-response')],
      ['@wdk-core/getAbstractedAddressBalance', getEncoding('@wdk-core/getAbstractedAddressBalance-response')],
      ['@wdk-core/getAbstractedAddressTokenBalance', getEncoding('@wdk-core/getAbstractedAddressTokenBalance-response')],
      ['@wdk-core/abstractedAccountTransfer', getEncoding('@wdk-core/abstractedAccountTransfer-response')],
      ['@wdk-core/getApproveTransaction', getEncoding('@wdk-core/getApproveTransaction-response')],
      ['@wdk-core/abstractedSendTransaction', getEncoding('@wdk-core/abstractedSendTransaction-response')],
      ['@wdk-core/abstractedAccountQuoteTransfer', getEncoding('@wdk-core/abstractedAccountQuoteTransfer-response')],
      ['@wdk-core/getTransactionReceipt', getEncoding('@wdk-core/getTransactionReceipt-response')],
      ['@wdk-core/generateAndEncrypt', getEncoding('@wdk-core/generateAndEncrypt-response')],
      ['@wdk-core/decrypt', getEncoding('@wdk-core/decrypt-response')],
      ['@wdk-core/generateSeed', getEncoding('@wdk-core/generateSeed-response')]
    ])
    this._rpc = new RPC(stream, async (req) => {
      const command = methods.get(req.command)
      const responseEncoding = this._responseEncodings.get(command)
      const requestEncoding = this._requestEncodings.get(command)
      if (this._requestIsSend(command)) {
        const request = req.data ? c.decode(requestEncoding, req.data) : null
        await this._handlers[command](request)
        return
      }
      if (!this._requestIsStream(command) && !this._responseIsStream(command)) {
        const request = req.data ? c.decode(requestEncoding, req.data) : null
        const response = await this._handlers[command](request)
        req.reply(c.encode(responseEncoding, response))
      }
      if (!this._requestIsStream(command) && this._responseIsStream(command)) {
        const request = req.data ? c.decode(requestEncoding, req.data) : null
        const responseStream = new RPCStream(null, null, req.createResponseStream(), responseEncoding)
        responseStream.data = request
        await this._handlers[command](responseStream)
      }
      if (this._requestIsStream(command) && !this._responseIsStream(command)) {
        const requestStream = new RPCRequestStream(req, responseEncoding, req.createRequestStream(), requestEncoding)
        const response = await this._handlers[command](requestStream)
        req.reply(c.encode(responseEncoding, response))
      }
      if (this._requestIsStream(command) && this._responseIsStream(command)) {
        const requestStream = new RPCRequestStream(req, responseEncoding, req.createRequestStream(), requestEncoding, req.createResponseStream(), responseEncoding)
        await this._handlers[command](requestStream)
      }
    })
  }

  async _call (name, args) {
    const requestEncoding = this._requestEncodings.get(name)
    const responseEncoding = this._responseEncodings.get(name)
    const request = this._rpc.request(methods.get(name))
    const encoded = c.encode(requestEncoding, args)
    request.send(encoded)
    return c.decode(responseEncoding, await request.reply())
  }

  _callSync (name, args) {
    const requestEncoding = this._requestEncodings.get(name)
    const responseEncoding = this._responseEncodings.get(name)
    const request = this._rpc.request(methods.get(name))
    if (this._requestIsSend(name)) {
      const encoded = c.encode(requestEncoding, args)
      request.send(encoded)
    }
    if (!this._requestIsStream(name) && this._responseIsStream(name)) {
      const encoded = c.encode(requestEncoding, args)
      request.send(encoded)
      return new RPCStream(request.createResponseStream(), responseEncoding)
    }
    if (this._requestIsStream(name) && !this._responseIsStream(name)) {
      return new RPCRequestStream(request, responseEncoding, null, null, request.createRequestStream(), requestEncoding)
    }
    if (this._requestIsStream(name) && this._responseIsStream(name)) {
      return new RPCRequestStream(request, responseEncoding, request.createResponseStream(), responseEncoding, request.createRequestStream(), requestEncoding)
    }
  }

  log (args) {
    return this._callSync('@wdk-core/log', args)
  }

  async workletStart (args) {
    return this._call('@wdk-core/workletStart', args)
  }

  async getAddress (args) {
    return this._call('@wdk-core/getAddress', args)
  }

  async getAddressBalance (args) {
    return this._call('@wdk-core/getAddressBalance', args)
  }

  async quoteSendTransaction (args) {
    return this._call('@wdk-core/quoteSendTransaction', args)
  }

  async sendTransaction (args) {
    return this._call('@wdk-core/sendTransaction', args)
  }

  async getAbstractedAddress (args) {
    return this._call('@wdk-core/getAbstractedAddress', args)
  }

  async getAbstractedAddressBalance (args) {
    return this._call('@wdk-core/getAbstractedAddressBalance', args)
  }

  async getAbstractedAddressTokenBalance (args) {
    return this._call('@wdk-core/getAbstractedAddressTokenBalance', args)
  }

  async abstractedAccountTransfer (args) {
    return this._call('@wdk-core/abstractedAccountTransfer', args)
  }

  async getApproveTransaction (args) {
    return this._call('@wdk-core/getApproveTransaction', args)
  }

  async abstractedSendTransaction (args) {
    return this._call('@wdk-core/abstractedSendTransaction', args)
  }

  async abstractedAccountQuoteTransfer (args) {
    return this._call('@wdk-core/abstractedAccountQuoteTransfer', args)
  }

  async getTransactionReceipt (args) {
    return this._call('@wdk-core/getTransactionReceipt', args)
  }

  dispose (args) {
    return this._callSync('@wdk-core/dispose', args)
  }

  async generateAndEncrypt (args) {
    return this._call('@wdk-core/generateAndEncrypt', args)
  }

  async decrypt (args) {
    return this._call('@wdk-core/decrypt', args)
  }

  async generateSeed (args) {
    return this._call('@wdk-core/generateSeed', args)
  }

  onLog (responseFn) {
    this._handlers['@wdk-core/log'] = responseFn
  }

  onWorkletStart (responseFn) {
    this._handlers['@wdk-core/workletStart'] = responseFn
  }

  onGetAddress (responseFn) {
    this._handlers['@wdk-core/getAddress'] = responseFn
  }

  onGetAddressBalance (responseFn) {
    this._handlers['@wdk-core/getAddressBalance'] = responseFn
  }

  onQuoteSendTransaction (responseFn) {
    this._handlers['@wdk-core/quoteSendTransaction'] = responseFn
  }

  onSendTransaction (responseFn) {
    this._handlers['@wdk-core/sendTransaction'] = responseFn
  }

  onGetAbstractedAddress (responseFn) {
    this._handlers['@wdk-core/getAbstractedAddress'] = responseFn
  }

  onGetAbstractedAddressBalance (responseFn) {
    this._handlers['@wdk-core/getAbstractedAddressBalance'] = responseFn
  }

  onGetAbstractedAddressTokenBalance (responseFn) {
    this._handlers['@wdk-core/getAbstractedAddressTokenBalance'] = responseFn
  }

  onAbstractedAccountTransfer (responseFn) {
    this._handlers['@wdk-core/abstractedAccountTransfer'] = responseFn
  }

  onGetApproveTransaction (responseFn) {
    this._handlers['@wdk-core/getApproveTransaction'] = responseFn
  }

  onAbstractedSendTransaction (responseFn) {
    this._handlers['@wdk-core/abstractedSendTransaction'] = responseFn
  }

  onAbstractedAccountQuoteTransfer (responseFn) {
    this._handlers['@wdk-core/abstractedAccountQuoteTransfer'] = responseFn
  }

  onGetTransactionReceipt (responseFn) {
    this._handlers['@wdk-core/getTransactionReceipt'] = responseFn
  }

  onDispose (responseFn) {
    this._handlers['@wdk-core/dispose'] = responseFn
  }

  onGenerateAndEncrypt (responseFn) {
    this._handlers['@wdk-core/generateAndEncrypt'] = responseFn
  }

  onDecrypt (responseFn) {
    this._handlers['@wdk-core/decrypt'] = responseFn
  }

  onGenerateSeed (responseFn) {
    this._handlers['@wdk-core/generateSeed'] = responseFn
  }

  _requestIsStream (command) {
    return [
    ].includes(command)
  }

  _responseIsStream (command) {
    return [
    ].includes(command)
  }

  _requestIsSend (command) {
    return [
      '@wdk-core/log',
      '@wdk-core/dispose'
    ].includes(command)
  }
}

export default HRPC
