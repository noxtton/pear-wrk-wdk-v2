// This file is autogenerated by the hyperschema compiler
// Schema Version: 1
/* eslint-disable camelcase */
/* eslint-disable quotes */

import { c } from 'hyperschema/runtime'

const VERSION = 1

// eslint-disable-next-line no-unused-vars
let version = VERSION

const encoding0_enum = {
  info: 1,
  error: 2,
  debug: 3
}

// @wdk-core/log-type-enum enum
const encoding0 = {
  preencode (state, m) {
    state.end++ // max enum is 3 so always one byte
  },
  encode (state, m) {
    if (m > 3) throw new Error('Unknown enum')
    c.uint.encode(state, m)
  },
  decode (state) {
    return c.uint.decode(state)
  }
}

// @wdk-core/log-request
const encoding1 = {
  preencode (state, m) {
    state.end++ // max flag is 2 so always one byte

    if (m.type) encoding0.preencode(state, m.type)
    if (m.data) c.string.preencode(state, m.data)
  },
  encode (state, m) {
    const flags =
      (m.type ? 1 : 0) |
      (m.data ? 2 : 0)

    c.uint.encode(state, flags)

    if (m.type) encoding0.encode(state, m.type)
    if (m.data) c.string.encode(state, m.data)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      type: (flags & 1) !== 0 ? encoding0.decode(state) : 0,
      data: (flags & 2) !== 0 ? c.string.decode(state) : null
    }
  }
}

// @wdk-core/workletStart-request-encrypted-seed
const encoding2 = {
  preencode (state, m) {
    c.string.preencode(state, m.seedBuffer)
    c.string.preencode(state, m.salt)
    c.string.preencode(state, m.prf)
  },
  encode (state, m) {
    c.string.encode(state, m.seedBuffer)
    c.string.encode(state, m.salt)
    c.string.encode(state, m.prf)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.string.decode(state)
    const r2 = c.string.decode(state)

    return {
      seedBuffer: r0,
      salt: r1,
      prf: r2
    }
  }
}

// @wdk-core/workletStart-request
const encoding3 = {
  preencode (state, m) {
    state.end++ // max flag is 4 so always one byte

    if (m.enableDebugLogs) c.uint.preencode(state, m.enableDebugLogs)
    if (m.seedPhrase) c.string.preencode(state, m.seedPhrase)
    if (m.seedBuffer) c.string.preencode(state, m.seedBuffer)
    c.string.preencode(state, m.config)
  },
  encode (state, m) {
    const flags =
      (m.enableDebugLogs ? 1 : 0) |
      (m.seedPhrase ? 2 : 0) |
      (m.seedBuffer ? 4 : 0)

    c.uint.encode(state, flags)

    if (m.enableDebugLogs) c.uint.encode(state, m.enableDebugLogs)
    if (m.seedPhrase) c.string.encode(state, m.seedPhrase)
    if (m.seedBuffer) c.string.encode(state, m.seedBuffer)
    c.string.encode(state, m.config)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      enableDebugLogs: (flags & 1) !== 0 ? c.uint.decode(state) : 0,
      seedPhrase: (flags & 2) !== 0 ? c.string.decode(state) : null,
      seedBuffer: (flags & 4) !== 0 ? c.string.decode(state) : null,
      config: c.string.decode(state)
    }
  }
}

// @wdk-core/workletStart-response
const encoding4 = {
  preencode (state, m) {
    state.end++ // max flag is 1 so always one byte

    if (m.status) c.string.preencode(state, m.status)
  },
  encode (state, m) {
    const flags = m.status ? 1 : 0

    c.uint.encode(state, flags)

    if (m.status) c.string.encode(state, m.status)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      status: (flags & 1) !== 0 ? c.string.decode(state) : null
    }
  }
}

// @wdk-core/wdkInit-request-encrypted-seed
const encoding5 = encoding2

// @wdk-core/wdkInit-request.encryptedSeed
const encoding6_3 = c.frame(encoding5)

// @wdk-core/wdkInit-request
const encoding6 = {
  preencode (state, m) {
    state.end++ // max flag is 8 so always one byte

    if (m.enableDebugLogs) c.uint.preencode(state, m.enableDebugLogs)
    if (m.seedPhrase) c.string.preencode(state, m.seedPhrase)
    if (m.seedBuffer) c.string.preencode(state, m.seedBuffer)
    if (m.encryptedSeed) encoding6_3.preencode(state, m.encryptedSeed)
    c.string.preencode(state, m.config)
  },
  encode (state, m) {
    const flags =
      (m.enableDebugLogs ? 1 : 0) |
      (m.seedPhrase ? 2 : 0) |
      (m.seedBuffer ? 4 : 0) |
      (m.encryptedSeed ? 8 : 0)

    c.uint.encode(state, flags)

    if (m.enableDebugLogs) c.uint.encode(state, m.enableDebugLogs)
    if (m.seedPhrase) c.string.encode(state, m.seedPhrase)
    if (m.seedBuffer) c.string.encode(state, m.seedBuffer)
    if (m.encryptedSeed) encoding6_3.encode(state, m.encryptedSeed)
    c.string.encode(state, m.config)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      enableDebugLogs: (flags & 1) !== 0 ? c.uint.decode(state) : 0,
      seedPhrase: (flags & 2) !== 0 ? c.string.decode(state) : null,
      seedBuffer: (flags & 4) !== 0 ? c.string.decode(state) : null,
      encryptedSeed: (flags & 8) !== 0 ? encoding6_3.decode(state) : null,
      config: c.string.decode(state)
    }
  }
}

// @wdk-core/wdkInit-response
const encoding7 = encoding4

// @wdk-core/getAddress-request
const encoding8 = {
  preencode (state, m) {
    c.string.preencode(state, m.network)
    c.uint.preencode(state, m.accountIndex)
  },
  encode (state, m) {
    c.string.encode(state, m.network)
    c.uint.encode(state, m.accountIndex)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.uint.decode(state)

    return {
      network: r0,
      accountIndex: r1
    }
  }
}

// @wdk-core/getAddress-response
const encoding9 = {
  preencode (state, m) {
    state.end++ // max flag is 1 so always one byte

    if (m.address) c.string.preencode(state, m.address)
  },
  encode (state, m) {
    const flags = m.address ? 1 : 0

    c.uint.encode(state, flags)

    if (m.address) c.string.encode(state, m.address)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      address: (flags & 1) !== 0 ? c.string.decode(state) : null
    }
  }
}

// @wdk-core/getAddressBalance-request
const encoding10 = encoding8

// @wdk-core/getAddressBalance-response
const encoding11 = {
  preencode (state, m) {
    state.end++ // max flag is 1 so always one byte

    if (m.balance) c.string.preencode(state, m.balance)
  },
  encode (state, m) {
    const flags = m.balance ? 1 : 0

    c.uint.encode(state, flags)

    if (m.balance) c.string.encode(state, m.balance)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      balance: (flags & 1) !== 0 ? c.string.decode(state) : null
    }
  }
}

// @wdk-core/quoteSendTransaction-request-options
const encoding12 = {
  preencode (state, m) {
    c.string.preencode(state, m.to)
    c.string.preencode(state, m.value)
  },
  encode (state, m) {
    c.string.encode(state, m.to)
    c.string.encode(state, m.value)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.string.decode(state)

    return {
      to: r0,
      value: r1
    }
  }
}

// @wdk-core/quoteSendTransaction-request.options
const encoding13_2 = c.frame(encoding12)

// @wdk-core/quoteSendTransaction-request
const encoding13 = {
  preencode (state, m) {
    c.string.preencode(state, m.network)
    c.uint.preencode(state, m.accountIndex)
    encoding13_2.preencode(state, m.options)
  },
  encode (state, m) {
    c.string.encode(state, m.network)
    c.uint.encode(state, m.accountIndex)
    encoding13_2.encode(state, m.options)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.uint.decode(state)
    const r2 = encoding13_2.decode(state)

    return {
      network: r0,
      accountIndex: r1,
      options: r2
    }
  }
}

// @wdk-core/quoteSendTransaction-response
const encoding14 = {
  preencode (state, m) {
    state.end++ // max flag is 1 so always one byte

    if (m.fee) c.string.preencode(state, m.fee)
  },
  encode (state, m) {
    const flags = m.fee ? 1 : 0

    c.uint.encode(state, flags)

    if (m.fee) c.string.encode(state, m.fee)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      fee: (flags & 1) !== 0 ? c.string.decode(state) : null
    }
  }
}

// @wdk-core/sendTransaction-request-options
const encoding15 = encoding12

// @wdk-core/sendTransaction-request.options
const encoding16_2 = c.frame(encoding15)

// @wdk-core/sendTransaction-request
const encoding16 = {
  preencode (state, m) {
    c.string.preencode(state, m.network)
    c.uint.preencode(state, m.accountIndex)
    encoding16_2.preencode(state, m.options)
  },
  encode (state, m) {
    c.string.encode(state, m.network)
    c.uint.encode(state, m.accountIndex)
    encoding16_2.encode(state, m.options)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.uint.decode(state)
    const r2 = encoding16_2.decode(state)

    return {
      network: r0,
      accountIndex: r1,
      options: r2
    }
  }
}

// @wdk-core/sendTransaction-response
const encoding17 = {
  preencode (state, m) {
    state.end++ // max flag is 2 so always one byte

    if (m.fee) c.string.preencode(state, m.fee)
    if (m.hash) c.string.preencode(state, m.hash)
  },
  encode (state, m) {
    const flags =
      (m.fee ? 1 : 0) |
      (m.hash ? 2 : 0)

    c.uint.encode(state, flags)

    if (m.fee) c.string.encode(state, m.fee)
    if (m.hash) c.string.encode(state, m.hash)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      fee: (flags & 1) !== 0 ? c.string.decode(state) : null,
      hash: (flags & 2) !== 0 ? c.string.decode(state) : null
    }
  }
}

// @wdk-core/getAbstractedAddress-request
const encoding18 = encoding8

// @wdk-core/getAbstractedAddress-response
const encoding19 = encoding9

// @wdk-core/getAbstractedAddressBalance-request
const encoding20 = encoding8

// @wdk-core/getAbstractedAddressBalance-response
const encoding21 = encoding11

// @wdk-core/getAbstractedAddressTokenBalance-request
const encoding22 = {
  preencode (state, m) {
    c.string.preencode(state, m.network)
    c.uint.preencode(state, m.accountIndex)
    c.string.preencode(state, m.tokenAddress)
  },
  encode (state, m) {
    c.string.encode(state, m.network)
    c.uint.encode(state, m.accountIndex)
    c.string.encode(state, m.tokenAddress)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.uint.decode(state)
    const r2 = c.string.decode(state)

    return {
      network: r0,
      accountIndex: r1,
      tokenAddress: r2
    }
  }
}

// @wdk-core/getAbstractedAddressTokenBalance-response
const encoding23 = encoding11

// @wdk-core/abstractedAccountTransfer-request-options
const encoding24 = {
  preencode (state, m) {
    c.string.preencode(state, m.token)
    c.string.preencode(state, m.recipient)
    c.string.preencode(state, m.amount)
  },
  encode (state, m) {
    c.string.encode(state, m.token)
    c.string.encode(state, m.recipient)
    c.string.encode(state, m.amount)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.string.decode(state)
    const r2 = c.string.decode(state)

    return {
      token: r0,
      recipient: r1,
      amount: r2
    }
  }
}

// @wdk-core/abstractedAccountTransfer-request-config-paymasterToken
const encoding25 = {
  preencode (state, m) {
    c.string.preencode(state, m.address)
  },
  encode (state, m) {
    c.string.encode(state, m.address)
  },
  decode (state) {
    const r0 = c.string.decode(state)

    return {
      address: r0
    }
  }
}

// @wdk-core/abstractedAccountTransfer-request-config.paymasterToken
const encoding26_0 = c.frame(encoding25)

// @wdk-core/abstractedAccountTransfer-request-config
const encoding26 = {
  preencode (state, m) {
    state.end++ // max flag is 1 so always one byte

    if (m.paymasterToken) encoding26_0.preencode(state, m.paymasterToken)
  },
  encode (state, m) {
    const flags = m.paymasterToken ? 1 : 0

    c.uint.encode(state, flags)

    if (m.paymasterToken) encoding26_0.encode(state, m.paymasterToken)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      paymasterToken: (flags & 1) !== 0 ? encoding26_0.decode(state) : null
    }
  }
}

// @wdk-core/abstractedAccountTransfer-request.options
const encoding27_2 = c.frame(encoding24)
// @wdk-core/abstractedAccountTransfer-request.config
const encoding27_3 = c.frame(encoding26)

// @wdk-core/abstractedAccountTransfer-request
const encoding27 = {
  preencode (state, m) {
    c.string.preencode(state, m.network)
    c.uint.preencode(state, m.accountIndex)
    encoding27_2.preencode(state, m.options)
    state.end++ // max flag is 1 so always one byte

    if (m.config) encoding27_3.preencode(state, m.config)
  },
  encode (state, m) {
    const flags = m.config ? 1 : 0

    c.string.encode(state, m.network)
    c.uint.encode(state, m.accountIndex)
    encoding27_2.encode(state, m.options)
    c.uint.encode(state, flags)

    if (m.config) encoding27_3.encode(state, m.config)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.uint.decode(state)
    const r2 = encoding27_2.decode(state)
    const flags = c.uint.decode(state)

    return {
      network: r0,
      accountIndex: r1,
      options: r2,
      config: (flags & 1) !== 0 ? encoding27_3.decode(state) : null
    }
  }
}

// @wdk-core/abstractedAccountTransfer-response
const encoding28 = {
  preencode (state, m) {
    state.end++ // max flag is 2 so always one byte

    if (m.hash) c.string.preencode(state, m.hash)
    if (m.fee) c.string.preencode(state, m.fee)
  },
  encode (state, m) {
    const flags =
      (m.hash ? 1 : 0) |
      (m.fee ? 2 : 0)

    c.uint.encode(state, flags)

    if (m.hash) c.string.encode(state, m.hash)
    if (m.fee) c.string.encode(state, m.fee)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      hash: (flags & 1) !== 0 ? c.string.decode(state) : null,
      fee: (flags & 2) !== 0 ? c.string.decode(state) : null
    }
  }
}

// @wdk-core/getApproveTransaction-request
const encoding29 = encoding24

// @wdk-core/getApproveTransaction-response
const encoding30 = {
  preencode (state, m) {
    c.string.preencode(state, m.to)
    c.string.preencode(state, m.value)
    c.string.preencode(state, m.data)
  },
  encode (state, m) {
    c.string.encode(state, m.to)
    c.string.encode(state, m.value)
    c.string.encode(state, m.data)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.string.decode(state)
    const r2 = c.string.decode(state)

    return {
      to: r0,
      value: r1,
      data: r2
    }
  }
}

// @wdk-core/abstractedSendTransaction-request-config-paymasterToken
const encoding31 = encoding25

// @wdk-core/abstractedSendTransaction-request-config.paymasterToken
const encoding32_0 = c.frame(encoding31)

// @wdk-core/abstractedSendTransaction-request-config
const encoding32 = {
  preencode (state, m) {
    state.end++ // max flag is 1 so always one byte

    if (m.paymasterToken) encoding32_0.preencode(state, m.paymasterToken)
  },
  encode (state, m) {
    const flags = m.paymasterToken ? 1 : 0

    c.uint.encode(state, flags)

    if (m.paymasterToken) encoding32_0.encode(state, m.paymasterToken)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      paymasterToken: (flags & 1) !== 0 ? encoding32_0.decode(state) : null
    }
  }
}

// @wdk-core/abstractedSendTransaction-request.config
const encoding33_3 = c.frame(encoding32)

// @wdk-core/abstractedSendTransaction-request
const encoding33 = {
  preencode (state, m) {
    c.string.preencode(state, m.network)
    c.uint.preencode(state, m.accountIndex)
    c.string.preencode(state, m.options)
    state.end++ // max flag is 1 so always one byte

    if (m.config) encoding33_3.preencode(state, m.config)
  },
  encode (state, m) {
    const flags = m.config ? 1 : 0

    c.string.encode(state, m.network)
    c.uint.encode(state, m.accountIndex)
    c.string.encode(state, m.options)
    c.uint.encode(state, flags)

    if (m.config) encoding33_3.encode(state, m.config)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.uint.decode(state)
    const r2 = c.string.decode(state)
    const flags = c.uint.decode(state)

    return {
      network: r0,
      accountIndex: r1,
      options: r2,
      config: (flags & 1) !== 0 ? encoding33_3.decode(state) : null
    }
  }
}

// @wdk-core/abstractedSendTransaction-response
const encoding34 = encoding28

// @wdk-core/abstractedAccountQuoteTransfer-request-options
const encoding35 = encoding24

// @wdk-core/abstractedAccountQuoteTransfer-request-config-paymasterToken
const encoding36 = encoding25

// @wdk-core/abstractedAccountQuoteTransfer-request-config.paymasterToken
const encoding37_0 = c.frame(encoding36)

// @wdk-core/abstractedAccountQuoteTransfer-request-config
const encoding37 = {
  preencode (state, m) {
    state.end++ // max flag is 1 so always one byte

    if (m.paymasterToken) encoding37_0.preencode(state, m.paymasterToken)
  },
  encode (state, m) {
    const flags = m.paymasterToken ? 1 : 0

    c.uint.encode(state, flags)

    if (m.paymasterToken) encoding37_0.encode(state, m.paymasterToken)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      paymasterToken: (flags & 1) !== 0 ? encoding37_0.decode(state) : null
    }
  }
}

// @wdk-core/abstractedAccountQuoteTransfer-request.options
const encoding38_2 = c.frame(encoding35)
// @wdk-core/abstractedAccountQuoteTransfer-request.config
const encoding38_3 = c.frame(encoding37)

// @wdk-core/abstractedAccountQuoteTransfer-request
const encoding38 = {
  preencode (state, m) {
    c.string.preencode(state, m.network)
    c.uint.preencode(state, m.accountIndex)
    encoding38_2.preencode(state, m.options)
    state.end++ // max flag is 1 so always one byte

    if (m.config) encoding38_3.preencode(state, m.config)
  },
  encode (state, m) {
    const flags = m.config ? 1 : 0

    c.string.encode(state, m.network)
    c.uint.encode(state, m.accountIndex)
    encoding38_2.encode(state, m.options)
    c.uint.encode(state, flags)

    if (m.config) encoding38_3.encode(state, m.config)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.uint.decode(state)
    const r2 = encoding38_2.decode(state)
    const flags = c.uint.decode(state)

    return {
      network: r0,
      accountIndex: r1,
      options: r2,
      config: (flags & 1) !== 0 ? encoding38_3.decode(state) : null
    }
  }
}

// @wdk-core/abstractedAccountQuoteTransfer-response
const encoding39 = encoding14

// @wdk-core/getTransactionReceipt-request
const encoding40 = {
  preencode (state, m) {
    c.string.preencode(state, m.network)
    c.uint.preencode(state, m.accountIndex)
    c.string.preencode(state, m.hash)
  },
  encode (state, m) {
    c.string.encode(state, m.network)
    c.uint.encode(state, m.accountIndex)
    c.string.encode(state, m.hash)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.uint.decode(state)
    const r2 = c.string.decode(state)

    return {
      network: r0,
      accountIndex: r1,
      hash: r2
    }
  }
}

// @wdk-core/getTransactionReceipt-response
const encoding41 = {
  preencode (state, m) {
    state.end++ // max flag is 1 so always one byte

    if (m.receipt) c.string.preencode(state, m.receipt)
  },
  encode (state, m) {
    const flags = m.receipt ? 1 : 0

    c.uint.encode(state, flags)

    if (m.receipt) c.string.encode(state, m.receipt)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      receipt: (flags & 1) !== 0 ? c.string.decode(state) : null
    }
  }
}

// @wdk-core/generateAndEncrypt-request
const encoding42 = {
  preencode (state, m) {
    state.end++ // max flag is 8 so always one byte

    if (m.passkey) c.string.preencode(state, m.passkey)
    if (m.salt) c.string.preencode(state, m.salt)
    if (m.seedPhrase) c.string.preencode(state, m.seedPhrase)
    if (m.derivedKey) c.string.preencode(state, m.derivedKey)
  },
  encode (state, m) {
    const flags =
      (m.passkey ? 1 : 0) |
      (m.salt ? 2 : 0) |
      (m.seedPhrase ? 4 : 0) |
      (m.derivedKey ? 8 : 0)

    c.uint.encode(state, flags)

    if (m.passkey) c.string.encode(state, m.passkey)
    if (m.salt) c.string.encode(state, m.salt)
    if (m.seedPhrase) c.string.encode(state, m.seedPhrase)
    if (m.derivedKey) c.string.encode(state, m.derivedKey)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      passkey: (flags & 1) !== 0 ? c.string.decode(state) : null,
      salt: (flags & 2) !== 0 ? c.string.decode(state) : null,
      seedPhrase: (flags & 4) !== 0 ? c.string.decode(state) : null,
      derivedKey: (flags & 8) !== 0 ? c.string.decode(state) : null
    }
  }
}

// @wdk-core/generateAndEncrypt-response
const encoding43 = {
  preencode (state, m) {
    state.end++ // max flag is 2 so always one byte

    if (m.encryptedEntropy) c.string.preencode(state, m.encryptedEntropy)
    if (m.encryptedSeed) c.string.preencode(state, m.encryptedSeed)
  },
  encode (state, m) {
    const flags =
      (m.encryptedEntropy ? 1 : 0) |
      (m.encryptedSeed ? 2 : 0)

    c.uint.encode(state, flags)

    if (m.encryptedEntropy) c.string.encode(state, m.encryptedEntropy)
    if (m.encryptedSeed) c.string.encode(state, m.encryptedSeed)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      encryptedEntropy: (flags & 1) !== 0 ? c.string.decode(state) : null,
      encryptedSeed: (flags & 2) !== 0 ? c.string.decode(state) : null
    }
  }
}

// @wdk-core/decrypt-request
const encoding44 = {
  preencode (state, m) {
    state.end++ // max flag is 8 so always one byte

    if (m.passkey) c.string.preencode(state, m.passkey)
    if (m.salt) c.string.preencode(state, m.salt)
    if (m.encryptedData) c.string.preencode(state, m.encryptedData)
    if (m.derivedKey) c.string.preencode(state, m.derivedKey)
  },
  encode (state, m) {
    const flags =
      (m.passkey ? 1 : 0) |
      (m.salt ? 2 : 0) |
      (m.encryptedData ? 4 : 0) |
      (m.derivedKey ? 8 : 0)

    c.uint.encode(state, flags)

    if (m.passkey) c.string.encode(state, m.passkey)
    if (m.salt) c.string.encode(state, m.salt)
    if (m.encryptedData) c.string.encode(state, m.encryptedData)
    if (m.derivedKey) c.string.encode(state, m.derivedKey)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      passkey: (flags & 1) !== 0 ? c.string.decode(state) : null,
      salt: (flags & 2) !== 0 ? c.string.decode(state) : null,
      encryptedData: (flags & 4) !== 0 ? c.string.decode(state) : null,
      derivedKey: (flags & 8) !== 0 ? c.string.decode(state) : null
    }
  }
}

// @wdk-core/decrypt-response
const encoding45 = {
  preencode (state, m) {
    state.end++ // max flag is 1 so always one byte

    if (m.result) c.string.preencode(state, m.result)
  },
  encode (state, m) {
    const flags = m.result ? 1 : 0

    c.uint.encode(state, flags)

    if (m.result) c.string.encode(state, m.result)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      result: (flags & 1) !== 0 ? c.string.decode(state) : null
    }
  }
}

// @wdk-core/generateSeed-request
const encoding46 = {
  preencode (state, m) {

  },
  encode (state, m) {

  },
  decode (state) {
    return {
    }
  }
}

// @wdk-core/generateSeed-response
const encoding47 = {
  preencode (state, m) {
    state.end++ // max flag is 1 so always one byte

    if (m.mnemonic) c.string.preencode(state, m.mnemonic)
  },
  encode (state, m) {
    const flags = m.mnemonic ? 1 : 0

    c.uint.encode(state, flags)

    if (m.mnemonic) c.string.encode(state, m.mnemonic)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      mnemonic: (flags & 1) !== 0 ? c.string.decode(state) : null
    }
  }
}

// @wdk-core/dispose-request
const encoding48 = encoding46

function setVersion (v) {
  version = v
}

function encode (name, value, v = VERSION) {
  version = v
  return c.encode(getEncoding(name), value)
}

function decode (name, buffer, v = VERSION) {
  version = v
  return c.decode(getEncoding(name), buffer)
}

function getEnum (name) {
  switch (name) {
    case '@wdk-core/log-type-enum': return encoding0_enum
    default: throw new Error('Enum not found ' + name)
  }
}

function getEncoding (name) {
  switch (name) {
    case '@wdk-core/log-type-enum': return encoding0
    case '@wdk-core/log-request': return encoding1
    case '@wdk-core/workletStart-request-encrypted-seed': return encoding2
    case '@wdk-core/workletStart-request': return encoding3
    case '@wdk-core/workletStart-response': return encoding4
    case '@wdk-core/wdkInit-request-encrypted-seed': return encoding5
    case '@wdk-core/wdkInit-request': return encoding6
    case '@wdk-core/wdkInit-response': return encoding7
    case '@wdk-core/getAddress-request': return encoding8
    case '@wdk-core/getAddress-response': return encoding9
    case '@wdk-core/getAddressBalance-request': return encoding10
    case '@wdk-core/getAddressBalance-response': return encoding11
    case '@wdk-core/quoteSendTransaction-request-options': return encoding12
    case '@wdk-core/quoteSendTransaction-request': return encoding13
    case '@wdk-core/quoteSendTransaction-response': return encoding14
    case '@wdk-core/sendTransaction-request-options': return encoding15
    case '@wdk-core/sendTransaction-request': return encoding16
    case '@wdk-core/sendTransaction-response': return encoding17
    case '@wdk-core/getAbstractedAddress-request': return encoding18
    case '@wdk-core/getAbstractedAddress-response': return encoding19
    case '@wdk-core/getAbstractedAddressBalance-request': return encoding20
    case '@wdk-core/getAbstractedAddressBalance-response': return encoding21
    case '@wdk-core/getAbstractedAddressTokenBalance-request': return encoding22
    case '@wdk-core/getAbstractedAddressTokenBalance-response': return encoding23
    case '@wdk-core/abstractedAccountTransfer-request-options': return encoding24
    case '@wdk-core/abstractedAccountTransfer-request-config-paymasterToken': return encoding25
    case '@wdk-core/abstractedAccountTransfer-request-config': return encoding26
    case '@wdk-core/abstractedAccountTransfer-request': return encoding27
    case '@wdk-core/abstractedAccountTransfer-response': return encoding28
    case '@wdk-core/getApproveTransaction-request': return encoding29
    case '@wdk-core/getApproveTransaction-response': return encoding30
    case '@wdk-core/abstractedSendTransaction-request-config-paymasterToken': return encoding31
    case '@wdk-core/abstractedSendTransaction-request-config': return encoding32
    case '@wdk-core/abstractedSendTransaction-request': return encoding33
    case '@wdk-core/abstractedSendTransaction-response': return encoding34
    case '@wdk-core/abstractedAccountQuoteTransfer-request-options': return encoding35
    case '@wdk-core/abstractedAccountQuoteTransfer-request-config-paymasterToken': return encoding36
    case '@wdk-core/abstractedAccountQuoteTransfer-request-config': return encoding37
    case '@wdk-core/abstractedAccountQuoteTransfer-request': return encoding38
    case '@wdk-core/abstractedAccountQuoteTransfer-response': return encoding39
    case '@wdk-core/getTransactionReceipt-request': return encoding40
    case '@wdk-core/getTransactionReceipt-response': return encoding41
    case '@wdk-core/generateAndEncrypt-request': return encoding42
    case '@wdk-core/generateAndEncrypt-response': return encoding43
    case '@wdk-core/decrypt-request': return encoding44
    case '@wdk-core/decrypt-response': return encoding45
    case '@wdk-core/generateSeed-request': return encoding46
    case '@wdk-core/generateSeed-response': return encoding47
    case '@wdk-core/dispose-request': return encoding48
    default: throw new Error('Encoder not found ' + name)
  }
}

function getStruct (name, v = VERSION) {
  const enc = getEncoding(name)
  return {
    preencode (state, m) {
      version = v
      enc.preencode(state, m)
    },
    encode (state, m) {
      version = v
      enc.encode(state, m)
    },
    decode (state) {
      version = v
      return enc.decode(state)
    }
  }
}

const resolveStruct = getStruct // compat

export { resolveStruct, getStruct, getEnum, getEncoding, encode, decode, setVersion, version }
