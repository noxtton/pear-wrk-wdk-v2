// This file is autogenerated by the hyperschema compiler
// Schema Version: 1
/* eslint-disable camelcase */
/* eslint-disable quotes */

const { c } = require('hyperschema/runtime')

const VERSION = 1

// eslint-disable-next-line no-unused-vars
let version = VERSION

const encoding0_enum = {
  info: 1,
  error: 2,
  debug: 3
}

// @wdk-core/log-type-enum enum
const encoding0 = {
  preencode (state, m) {
    state.end++ // max enum is 3 so always one byte
  },
  encode (state, m) {
    if (m > 3) throw new Error('Unknown enum')
    c.uint.encode(state, m)
  },
  decode (state) {
    return c.uint.decode(state)
  }
}

// @wdk-core/log-request
const encoding1 = {
  preencode (state, m) {
    state.end++ // max flag is 2 so always one byte

    if (m.type) encoding0.preencode(state, m.type)
    if (m.data) c.string.preencode(state, m.data)
  },
  encode (state, m) {
    const flags =
      (m.type ? 1 : 0) |
      (m.data ? 2 : 0)

    c.uint.encode(state, flags)

    if (m.type) encoding0.encode(state, m.type)
    if (m.data) c.string.encode(state, m.data)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      type: (flags & 1) !== 0 ? encoding0.decode(state) : 0,
      data: (flags & 2) !== 0 ? c.string.decode(state) : null
    }
  }
}

// @wdk-core/rpc-exception
const encoding2 = {
  preencode (state, m) {
    state.end++ // max flag is 4 so always one byte

    if (m.code) c.string.preencode(state, m.code)
    if (m.message) c.string.preencode(state, m.message)
    if (m.error) c.string.preencode(state, m.error)
  },
  encode (state, m) {
    const flags =
      (m.code ? 1 : 0) |
      (m.message ? 2 : 0) |
      (m.error ? 4 : 0)

    c.uint.encode(state, flags)

    if (m.code) c.string.encode(state, m.code)
    if (m.message) c.string.encode(state, m.message)
    if (m.error) c.string.encode(state, m.error)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      code: (flags & 1) !== 0 ? c.string.decode(state) : null,
      message: (flags & 2) !== 0 ? c.string.decode(state) : null,
      error: (flags & 4) !== 0 ? c.string.decode(state) : null
    }
  }
}

// @wdk-core/workletStart-request
const encoding3 = {
  preencode (state, m) {
    state.end++ // max flag is 4 so always one byte

    if (m.enableDebugLogs) c.uint.preencode(state, m.enableDebugLogs)
    if (m.seedPhrase) c.string.preencode(state, m.seedPhrase)
    if (m.seedBuffer) c.string.preencode(state, m.seedBuffer)
    c.string.preencode(state, m.config)
  },
  encode (state, m) {
    const flags =
      (m.enableDebugLogs ? 1 : 0) |
      (m.seedPhrase ? 2 : 0) |
      (m.seedBuffer ? 4 : 0)

    c.uint.encode(state, flags)

    if (m.enableDebugLogs) c.uint.encode(state, m.enableDebugLogs)
    if (m.seedPhrase) c.string.encode(state, m.seedPhrase)
    if (m.seedBuffer) c.string.encode(state, m.seedBuffer)
    c.string.encode(state, m.config)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      enableDebugLogs: (flags & 1) !== 0 ? c.uint.decode(state) : 0,
      seedPhrase: (flags & 2) !== 0 ? c.string.decode(state) : null,
      seedBuffer: (flags & 4) !== 0 ? c.string.decode(state) : null,
      config: c.string.decode(state)
    }
  }
}

// @wdk-core/workletStart-response.exception
const encoding4_1 = c.frame(encoding2)

// @wdk-core/workletStart-response
const encoding4 = {
  preencode (state, m) {
    state.end++ // max flag is 2 so always one byte

    if (m.status) c.string.preencode(state, m.status)
    if (m.exception) encoding4_1.preencode(state, m.exception)
  },
  encode (state, m) {
    const flags =
      (m.status ? 1 : 0) |
      (m.exception ? 2 : 0)

    c.uint.encode(state, flags)

    if (m.status) c.string.encode(state, m.status)
    if (m.exception) encoding4_1.encode(state, m.exception)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      status: (flags & 1) !== 0 ? c.string.decode(state) : null,
      exception: (flags & 2) !== 0 ? encoding4_1.decode(state) : null
    }
  }
}

// @wdk-core/getAddress-request
const encoding5 = {
  preencode (state, m) {
    c.string.preencode(state, m.network)
    c.uint.preencode(state, m.accountIndex)
  },
  encode (state, m) {
    c.string.encode(state, m.network)
    c.uint.encode(state, m.accountIndex)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.uint.decode(state)

    return {
      network: r0,
      accountIndex: r1
    }
  }
}

// @wdk-core/getAddress-response.exception
const encoding6_1 = encoding4_1

// @wdk-core/getAddress-response
const encoding6 = {
  preencode (state, m) {
    state.end++ // max flag is 2 so always one byte

    if (m.address) c.string.preencode(state, m.address)
    if (m.exception) encoding6_1.preencode(state, m.exception)
  },
  encode (state, m) {
    const flags =
      (m.address ? 1 : 0) |
      (m.exception ? 2 : 0)

    c.uint.encode(state, flags)

    if (m.address) c.string.encode(state, m.address)
    if (m.exception) encoding6_1.encode(state, m.exception)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      address: (flags & 1) !== 0 ? c.string.decode(state) : null,
      exception: (flags & 2) !== 0 ? encoding6_1.decode(state) : null
    }
  }
}

// @wdk-core/getAddressBalance-request
const encoding7 = encoding5

// @wdk-core/getAddressBalance-response.exception
const encoding8_1 = encoding4_1

// @wdk-core/getAddressBalance-response
const encoding8 = {
  preencode (state, m) {
    state.end++ // max flag is 2 so always one byte

    if (m.balance) c.string.preencode(state, m.balance)
    if (m.exception) encoding8_1.preencode(state, m.exception)
  },
  encode (state, m) {
    const flags =
      (m.balance ? 1 : 0) |
      (m.exception ? 2 : 0)

    c.uint.encode(state, flags)

    if (m.balance) c.string.encode(state, m.balance)
    if (m.exception) encoding8_1.encode(state, m.exception)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      balance: (flags & 1) !== 0 ? c.string.decode(state) : null,
      exception: (flags & 2) !== 0 ? encoding8_1.decode(state) : null
    }
  }
}

// @wdk-core/quoteSendTransaction-request-options
const encoding9 = {
  preencode (state, m) {
    c.string.preencode(state, m.to)
    c.string.preencode(state, m.value)
  },
  encode (state, m) {
    c.string.encode(state, m.to)
    c.string.encode(state, m.value)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.string.decode(state)

    return {
      to: r0,
      value: r1
    }
  }
}

// @wdk-core/quoteSendTransaction-request.options
const encoding10_2 = c.frame(encoding9)

// @wdk-core/quoteSendTransaction-request
const encoding10 = {
  preencode (state, m) {
    c.string.preencode(state, m.network)
    c.uint.preencode(state, m.accountIndex)
    encoding10_2.preencode(state, m.options)
  },
  encode (state, m) {
    c.string.encode(state, m.network)
    c.uint.encode(state, m.accountIndex)
    encoding10_2.encode(state, m.options)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.uint.decode(state)
    const r2 = encoding10_2.decode(state)

    return {
      network: r0,
      accountIndex: r1,
      options: r2
    }
  }
}

// @wdk-core/quoteSendTransaction-response.exception
const encoding11_1 = encoding4_1

// @wdk-core/quoteSendTransaction-response
const encoding11 = {
  preencode (state, m) {
    state.end++ // max flag is 2 so always one byte

    if (m.fee) c.string.preencode(state, m.fee)
    if (m.exception) encoding11_1.preencode(state, m.exception)
  },
  encode (state, m) {
    const flags =
      (m.fee ? 1 : 0) |
      (m.exception ? 2 : 0)

    c.uint.encode(state, flags)

    if (m.fee) c.string.encode(state, m.fee)
    if (m.exception) encoding11_1.encode(state, m.exception)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      fee: (flags & 1) !== 0 ? c.string.decode(state) : null,
      exception: (flags & 2) !== 0 ? encoding11_1.decode(state) : null
    }
  }
}

// @wdk-core/getAbstractedAddress-request
const encoding12 = encoding5

// @wdk-core/getAbstractedAddress-response.exception
const encoding13_1 = encoding4_1

// @wdk-core/getAbstractedAddress-response
const encoding13 = {
  preencode (state, m) {
    state.end++ // max flag is 2 so always one byte

    if (m.address) c.string.preencode(state, m.address)
    if (m.exception) encoding13_1.preencode(state, m.exception)
  },
  encode (state, m) {
    const flags =
      (m.address ? 1 : 0) |
      (m.exception ? 2 : 0)

    c.uint.encode(state, flags)

    if (m.address) c.string.encode(state, m.address)
    if (m.exception) encoding13_1.encode(state, m.exception)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      address: (flags & 1) !== 0 ? c.string.decode(state) : null,
      exception: (flags & 2) !== 0 ? encoding13_1.decode(state) : null
    }
  }
}

// @wdk-core/getAbstractedAddressBalance-request
const encoding14 = encoding5

// @wdk-core/getAbstractedAddressBalance-response.exception
const encoding15_1 = encoding4_1

// @wdk-core/getAbstractedAddressBalance-response
const encoding15 = {
  preencode (state, m) {
    state.end++ // max flag is 2 so always one byte

    if (m.balance) c.string.preencode(state, m.balance)
    if (m.exception) encoding15_1.preencode(state, m.exception)
  },
  encode (state, m) {
    const flags =
      (m.balance ? 1 : 0) |
      (m.exception ? 2 : 0)

    c.uint.encode(state, flags)

    if (m.balance) c.string.encode(state, m.balance)
    if (m.exception) encoding15_1.encode(state, m.exception)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      balance: (flags & 1) !== 0 ? c.string.decode(state) : null,
      exception: (flags & 2) !== 0 ? encoding15_1.decode(state) : null
    }
  }
}

// @wdk-core/getAbstractedAddressTokenBalance-request
const encoding16 = {
  preencode (state, m) {
    c.string.preencode(state, m.network)
    c.uint.preencode(state, m.accountIndex)
    c.string.preencode(state, m.tokenAddress)
  },
  encode (state, m) {
    c.string.encode(state, m.network)
    c.uint.encode(state, m.accountIndex)
    c.string.encode(state, m.tokenAddress)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.uint.decode(state)
    const r2 = c.string.decode(state)

    return {
      network: r0,
      accountIndex: r1,
      tokenAddress: r2
    }
  }
}

// @wdk-core/getAbstractedAddressTokenBalance-response.exception
const encoding17_1 = encoding4_1

// @wdk-core/getAbstractedAddressTokenBalance-response
const encoding17 = {
  preencode (state, m) {
    state.end++ // max flag is 2 so always one byte

    if (m.balance) c.string.preencode(state, m.balance)
    if (m.exception) encoding17_1.preencode(state, m.exception)
  },
  encode (state, m) {
    const flags =
      (m.balance ? 1 : 0) |
      (m.exception ? 2 : 0)

    c.uint.encode(state, flags)

    if (m.balance) c.string.encode(state, m.balance)
    if (m.exception) encoding17_1.encode(state, m.exception)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      balance: (flags & 1) !== 0 ? c.string.decode(state) : null,
      exception: (flags & 2) !== 0 ? encoding17_1.decode(state) : null
    }
  }
}

// @wdk-core/abstractedAccountTransfer-request-options
const encoding18 = {
  preencode (state, m) {
    c.string.preencode(state, m.token)
    c.string.preencode(state, m.recipient)
    c.string.preencode(state, m.amount)
  },
  encode (state, m) {
    c.string.encode(state, m.token)
    c.string.encode(state, m.recipient)
    c.string.encode(state, m.amount)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.string.decode(state)
    const r2 = c.string.decode(state)

    return {
      token: r0,
      recipient: r1,
      amount: r2
    }
  }
}

// @wdk-core/abstractedAccountTransfer-request.options
const encoding19_2 = c.frame(encoding18)

// @wdk-core/abstractedAccountTransfer-request
const encoding19 = {
  preencode (state, m) {
    c.string.preencode(state, m.network)
    c.uint.preencode(state, m.accountIndex)
    encoding19_2.preencode(state, m.options)
  },
  encode (state, m) {
    c.string.encode(state, m.network)
    c.uint.encode(state, m.accountIndex)
    encoding19_2.encode(state, m.options)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.uint.decode(state)
    const r2 = encoding19_2.decode(state)

    return {
      network: r0,
      accountIndex: r1,
      options: r2
    }
  }
}

// @wdk-core/abstractedAccountTransfer-response.exception
const encoding20_2 = encoding4_1

// @wdk-core/abstractedAccountTransfer-response
const encoding20 = {
  preencode (state, m) {
    state.end++ // max flag is 4 so always one byte

    if (m.hash) c.string.preencode(state, m.hash)
    if (m.fee) c.string.preencode(state, m.fee)
    if (m.exception) encoding20_2.preencode(state, m.exception)
  },
  encode (state, m) {
    const flags =
      (m.hash ? 1 : 0) |
      (m.fee ? 2 : 0) |
      (m.exception ? 4 : 0)

    c.uint.encode(state, flags)

    if (m.hash) c.string.encode(state, m.hash)
    if (m.fee) c.string.encode(state, m.fee)
    if (m.exception) encoding20_2.encode(state, m.exception)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      hash: (flags & 1) !== 0 ? c.string.decode(state) : null,
      fee: (flags & 2) !== 0 ? c.string.decode(state) : null,
      exception: (flags & 4) !== 0 ? encoding20_2.decode(state) : null
    }
  }
}

// @wdk-core/abstractedAccountQuoteTransfer-request-options
const encoding21 = encoding18

// @wdk-core/abstractedAccountQuoteTransfer-request.options
const encoding22_2 = c.frame(encoding21)

// @wdk-core/abstractedAccountQuoteTransfer-request
const encoding22 = {
  preencode (state, m) {
    c.string.preencode(state, m.network)
    c.uint.preencode(state, m.accountIndex)
    encoding22_2.preencode(state, m.options)
  },
  encode (state, m) {
    c.string.encode(state, m.network)
    c.uint.encode(state, m.accountIndex)
    encoding22_2.encode(state, m.options)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.uint.decode(state)
    const r2 = encoding22_2.decode(state)

    return {
      network: r0,
      accountIndex: r1,
      options: r2
    }
  }
}

// @wdk-core/abstractedAccountQuoteTransfer-response.exception
const encoding23_1 = encoding4_1

// @wdk-core/abstractedAccountQuoteTransfer-response
const encoding23 = {
  preencode (state, m) {
    state.end++ // max flag is 2 so always one byte

    if (m.fee) c.string.preencode(state, m.fee)
    if (m.exception) encoding23_1.preencode(state, m.exception)
  },
  encode (state, m) {
    const flags =
      (m.fee ? 1 : 0) |
      (m.exception ? 2 : 0)

    c.uint.encode(state, flags)

    if (m.fee) c.string.encode(state, m.fee)
    if (m.exception) encoding23_1.encode(state, m.exception)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      fee: (flags & 1) !== 0 ? c.string.decode(state) : null,
      exception: (flags & 2) !== 0 ? encoding23_1.decode(state) : null
    }
  }
}

// @wdk-core/dispose-request
const encoding24 = {
  preencode (state, m) {

  },
  encode (state, m) {

  },
  decode (state) {
    return {
    }
  }
}

function setVersion (v) {
  version = v
}

function encode (name, value, v = VERSION) {
  version = v
  return c.encode(getEncoding(name), value)
}

function decode (name, buffer, v = VERSION) {
  version = v
  return c.decode(getEncoding(name), buffer)
}

function getEnum (name) {
  switch (name) {
    case '@wdk-core/log-type-enum': return encoding0_enum
    default: throw new Error('Enum not found ' + name)
  }
}

function getEncoding (name) {
  switch (name) {
    case '@wdk-core/log-type-enum': return encoding0
    case '@wdk-core/log-request': return encoding1
    case '@wdk-core/rpc-exception': return encoding2
    case '@wdk-core/workletStart-request': return encoding3
    case '@wdk-core/workletStart-response': return encoding4
    case '@wdk-core/getAddress-request': return encoding5
    case '@wdk-core/getAddress-response': return encoding6
    case '@wdk-core/getAddressBalance-request': return encoding7
    case '@wdk-core/getAddressBalance-response': return encoding8
    case '@wdk-core/quoteSendTransaction-request-options': return encoding9
    case '@wdk-core/quoteSendTransaction-request': return encoding10
    case '@wdk-core/quoteSendTransaction-response': return encoding11
    case '@wdk-core/getAbstractedAddress-request': return encoding12
    case '@wdk-core/getAbstractedAddress-response': return encoding13
    case '@wdk-core/getAbstractedAddressBalance-request': return encoding14
    case '@wdk-core/getAbstractedAddressBalance-response': return encoding15
    case '@wdk-core/getAbstractedAddressTokenBalance-request': return encoding16
    case '@wdk-core/getAbstractedAddressTokenBalance-response': return encoding17
    case '@wdk-core/abstractedAccountTransfer-request-options': return encoding18
    case '@wdk-core/abstractedAccountTransfer-request': return encoding19
    case '@wdk-core/abstractedAccountTransfer-response': return encoding20
    case '@wdk-core/abstractedAccountQuoteTransfer-request-options': return encoding21
    case '@wdk-core/abstractedAccountQuoteTransfer-request': return encoding22
    case '@wdk-core/abstractedAccountQuoteTransfer-response': return encoding23
    case '@wdk-core/dispose-request': return encoding24
    default: throw new Error('Encoder not found ' + name)
  }
}

function getStruct (name, v = VERSION) {
  const enc = getEncoding(name)
  return {
    preencode (state, m) {
      version = v
      enc.preencode(state, m)
    },
    encode (state, m) {
      version = v
      enc.encode(state, m)
    },
    decode (state) {
      version = v
      return enc.decode(state)
    }
  }
}

const resolveStruct = getStruct // compat

module.exports = { resolveStruct, getStruct, getEnum, getEncoding, encode, decode, setVersion, version }
