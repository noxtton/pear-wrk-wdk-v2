// This file is autogenerated by the hyperschema compiler
// Schema Version: 4
/* eslint-disable camelcase */
/* eslint-disable quotes */

const { c } = require('hyperschema/runtime')

const VERSION = 4

// eslint-disable-next-line no-unused-vars
let version = VERSION

// @wdk-core/command-workletStart-request
const encoding0 = {
  preencode (state, m) {
    state.end++ // max flag is 4 so always one byte

    if (m.enableDebugLogs) c.uint.preencode(state, m.enableDebugLogs)
    if (version >= 2 && m.seedPhrase) c.string.preencode(state, m.seedPhrase)
    if (version >= 2 && m.seedBuffer) c.string.preencode(state, m.seedBuffer)
    c.string.preencode(state, m.config)
  },
  encode (state, m) {
    const flags =
      (m.enableDebugLogs ? 1 : 0) |
      ((version >= 2 && m.seedPhrase) ? 2 : 0) |
      ((version >= 2 && m.seedBuffer) ? 4 : 0)

    c.uint.encode(state, flags)

    if (m.enableDebugLogs) c.uint.encode(state, m.enableDebugLogs)
    if (version >= 2 && m.seedPhrase) c.string.encode(state, m.seedPhrase)
    if (version >= 2 && m.seedBuffer) c.string.encode(state, m.seedBuffer)
    c.string.encode(state, m.config)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      enableDebugLogs: (flags & 1) !== 0 ? c.uint.decode(state) : 0,
      seedPhrase: (version >= 2 && (flags & 2) !== 0) ? c.string.decode(state) : null,
      seedBuffer: (version >= 2 && (flags & 4) !== 0) ? c.string.decode(state) : null,
      config: c.string.decode(state)
    }
  }
}

// @wdk-core/command-workletStart-response
const encoding1 = {
  preencode (state, m) {
    state.end++ // max flag is 2 so always one byte

    if (m.status) c.string.preencode(state, m.status)
    if (version >= 4 && m.exception) c.string.preencode(state, m.exception)
  },
  encode (state, m) {
    const flags =
      (m.status ? 1 : 0) |
      ((version >= 4 && m.exception) ? 2 : 0)

    c.uint.encode(state, flags)

    if (m.status) c.string.encode(state, m.status)
    if (version >= 4 && m.exception) c.string.encode(state, m.exception)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      status: (flags & 1) !== 0 ? c.string.decode(state) : null,
      exception: (version >= 4 && (flags & 2) !== 0) ? c.string.decode(state) : null
    }
  }
}

// @wdk-core/command-workletStop-request
const encoding2 = {
  preencode (state, m) {
    state.end++ // max flag is 1 so always one byte

    if (m.payload) c.string.preencode(state, m.payload)
  },
  encode (state, m) {
    const flags = m.payload ? 1 : 0

    c.uint.encode(state, flags)

    if (m.payload) c.string.encode(state, m.payload)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      payload: (flags & 1) !== 0 ? c.string.decode(state) : null
    }
  }
}

// @wdk-core/command-workletStop-response
const encoding3 = {
  preencode (state, m) {
    state.end++ // max flag is 1 so always one byte

    if (m.status) c.string.preencode(state, m.status)
  },
  encode (state, m) {
    const flags = m.status ? 1 : 0

    c.uint.encode(state, flags)

    if (m.status) c.string.encode(state, m.status)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      status: (flags & 1) !== 0 ? c.string.decode(state) : null
    }
  }
}

function setVersion (v) {
  version = v
}

function encode (name, value, v = VERSION) {
  version = v
  return c.encode(getEncoding(name), value)
}

function decode (name, buffer, v = VERSION) {
  version = v
  return c.decode(getEncoding(name), buffer)
}

function getEnum (name) {
  switch (name) {
    default: throw new Error('Enum not found ' + name)
  }
}

function getEncoding (name) {
  switch (name) {
    case '@wdk-core/command-workletStart-request': return encoding0
    case '@wdk-core/command-workletStart-response': return encoding1
    case '@wdk-core/command-workletStop-request': return encoding2
    case '@wdk-core/command-workletStop-response': return encoding3
    default: throw new Error('Encoder not found ' + name)
  }
}

function getStruct (name, v = VERSION) {
  const enc = getEncoding(name)
  return {
    preencode (state, m) {
      version = v
      enc.preencode(state, m)
    },
    encode (state, m) {
      version = v
      enc.encode(state, m)
    },
    decode (state) {
      version = v
      return enc.decode(state)
    }
  }
}

const resolveStruct = getStruct // compat

module.exports = { resolveStruct, getStruct, getEnum, getEncoding, encode, decode, setVersion, version }
